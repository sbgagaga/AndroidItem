View类常用属性：
id属性：变量名
background属性：背景
padding：内边距
	paddingLeft（paddingStart）、paddingTop、paddingRight、paddingBottom（paddingEnd）
ViewGroup extends View：是一个抽象类
ViewGroup.LayputParams：是ViewGroup 内部类
layout_height：控制组件布局高度
layout_width：控制组件布局宽度
以上2个参数可以设置成具体数值，也可以使用Match_Parent（与父容器相同）、Wrap_Content（包裹自身内容）
ViewGroup.MarginLayoutParams：是ViewGroup 内部类，用来组件的外边距
layout_marginTop、layout_marginBottom、layout_marginLeft（layout_marginStart）、layout_marginRight（layout_marginEnd）
layout_gravity：设置组件自身相当于父容器的对齐方式

RelativeLayout:相对布局管理器
gravity：设置在布局管理器中各组件的位置，可以用|连接2个关键字进行设置
ignoreGravity：设置组件不受gravity影响
RelativeLayout.LayoutParams:相对布局管理器子组件
layout_above、layout_below、layout_toLeftOf、layout_toRightOf：设置组件相对于参考组件位置（不是覆盖）
layout_alignParentBottom、layout_alignParentLeft、layout_alignParentRight、layout_alignParentTop：设置组件与布局管理器哪边对齐
layout_alignBottom、layout_alignLeft、layout_alignRight、layout_alignTop：设置组件与某一个组件的上下左右边界对齐
layout_centerHorizontal、layout_centerInParent、layout_centerVertical：设置组件位于布局管理器哪个位置

LinearLayout：线性布局管理器，分为垂直、水平布局管理器：每一行或者每一列只能放置一个组件，如果组件放置过多，超过屏幕将不会被显示
orientation：设置线性布局管理器是垂直还是水平
gravity：设置布局管理器内组件的位置，可以用|连接2个关键字进行设置
layout_weight：设置组件占父容器剩余空间的比例，默认是0.例如：一个水平布局管理器一共长100，一个组件20，一个组件30，剩余50，把这2个组件的比重都设置成1，那么将分配成45,55。

FrameLayout：帧布局管理器
foreground：设置前景图像，前景图像：始终位于最上层的图像
foregroundGravity：设置前景图像的位置

TableLayout：表格布局管理器，没有列，在每一行中添加一个组件就占一列
TableRow：表格中的行容器，表示一行，可以再添加其他组件
collapseColumns：设置一列不显示，索引从0开始，可以隐藏多列，使用逗号分割
stretchColumns：设置列可以被拉伸，即这一列会被拉伸占据剩余空间
shrinkColumns:设置列允许被收缩，即当一行超过屏幕，收缩该列，让整行得以显示

GridLayout：网格布局管理器
columnCount：指定最大列数
orientation：设置排列方式（水平或垂直排列）
rowCount：指定最大行数
layout_colums：指定子组件位于网格第几列
layout_columnSpan：指定组件横向跨几列
layout_columnWeight：子组件分配父组件水平方向剩余空间的比例
layout_gravity：子组件通过什么方式占据网格空间的（什么居中，水平居中，fill之类）
layout_row：指定子组件位于网格的第几行
layout_rowSpan：指定组件纵向跨几行
layout_rowWeight：子组件分配父组件垂直方向剩余空间的比例
跨行和跨列操作需要同时指定layout_gravity为fill。

布局管理器的嵌套
根布局管理器必须包含xmlns属性，在一个布局文件中最多只能有一个根布局管理器，不能有太多嵌套，会影响性能

---------------------------------------------------------------------------------------------------------------------------------------------------

基础UI组件：
TextView：文本框组件，子类EditView的属性也可以使用
singleLine：设置文本框是否为单行文本框，多余的文字会被...代替
maxWidth：设置文本框的最大宽度，方便其自动换行
设置字体大小用sp，设置宽度大小用dp

EditView：编辑框组件，是TextView的子类
hint：设置提示文字，一旦输入内容就会消失
inputType：设置输入类型，比如textPassword设置成密码框，设置textMultiLine可以监听到setOnEditorActionListener回车事件
drawableLeft：在编辑框左侧显示图片，和drawableStart一样，还有drawableBottom、drawableRight（drawableEnd）、drawableTop
drawablePadding：设置图片和文字的距离，单位是dp
lines：设置编辑框组件的文本行数，多余的文本会自动滚动隐藏
交互：EditText et=findViewById(R.id.编辑框的id)；//获取编辑框组件
et.getText();//获取编辑框中输入的文本

ImageView：图像组件
src：设置图片
scaleType：如何显示图片，默认是等比缩放，fitXY使图片缩放到控件大小，完全填充控件大小展示
setImageAlpha();//设置透明度

ButtonView：按钮组件，是TextView的子类
text：设置按钮文本
交互：方法1：匿名内部类
Button button=findViewById(R.id.按钮id);//获取按钮对象
button.setOnClickListener(new View.OnClickListener(){
	@Override
	public void onClick(View v){
		//弹出一个消息提示框,Toast.LENGTH_SHORT是设置提示框显示时间长短
		Toast.makeText(MainActivity.this,"单击了按钮",Toast.LENGTH_SHORT).show();
	}
});
方法2：类似于QT的信号与槽
在java文件中定义一个方法，在Button组件中使用onClick属性指定方法名即可

ImageButton：图片按钮组件

RadioGroup：包含RadioButton组件，组成单选按钮组

RadioButton：单选按钮组件
text：设置文字
checked：设置为默认值，使用true
交互：获取选中的值
RadioGroup rg=findViewById(R.id.单选按钮组id);
rg.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
	@Override
	public void onCheckedChanged(RadioGroup group, int checkedId) {
		RadioButton rb=findViewById(checkedId);
                	Toast.makeText(MainActivity.this, rb.getText(), Toast.LENGTH_SHORT).show();	
	}
});
在添加一个提交按钮
Button bt=findViewById(R.id.tijiao);
bt.setOnClickListener(new View.OnClickListener() {
	@Override
	public void onClick(View v) {
		for (int i = 0; i <rg.getChildCount() ; i++) {
			RadioButton r= (RadioButton) rg.getChildAt(i);
			if(r.isChecked()){
				Toast.makeText(MainActivity.this,r.getText(),Toast.LENGTH_SHORT).show();
				break;
			}
		}
	}
});

CheckBox：复选框组件
交互：CheckBox cb=findViewById(R.id.复选框id);
cb.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
	@Override
	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
		//
	}	
}

DatePicker：日期选择器，长度和宽度都选中和父容器相同
交互：int year,month,day;
DatePicker dp=findViewById(R.id.日期选择器id);
dp.init(year,month,day,new DatePicker.OnDateChangedListener(){
	@Override
	public void onDateChanged(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
		MainActivity.this.year = year;
		MainActivity.this.month = monthOfYear;
		MainActivity.this.day = dayOfMonth;//获取选择的日期
	}
});

TimePicker：时间选择器
交互：TimePicker tp=findViewById(R.id.timePicker);
tp.setIs24HourView(true);//设置成24小时制
tp.setOnTimeChangedListener(new TimePicker.OnTimeChangedListener() {
		@Override
		public void onTimeChanged(TimePicker view, int hourOfDay, int minute) {
		String str=hourOfDay+"时"+minute+"分";
		Toast.makeText(MainActivity.this,str,Toast.LENGTH_SHORT).show();
	}
});

Chronometer：计时器是TextView的子类
format：设置格式，例如"已用时间：%s"
setBase()：设置计时器的起始时间
setFormat()：设置显示时间的格式
start()：指定开始计时
stop()：指定停止计时
setOnChronometerTickListener()：为计时器绑定事件监听器，当计时器改变时触发该监听器
交互：Chronometer ch=findViewById(R.id.ch);
ch.setBase(SystemClock.elapsedRealtime());
ch.setFormat("%s");
ch.start();
ch.setOnChronometerTickListener(new Chronometer.OnChronometerTickListener() {
	@Override
	public void onChronometerTick(Chronometer chronometer) {
	if (SystemClock.elapsedRealtime()-ch.getBase()>=60000){//毫米单位
			ch.stop();
		}
	}
});

---------------------------------------------------------------------------------------------------------------------------------------------------

高级UI组件：
ProgressBar：进度条组件
max：设置进度条最大值，例如"100"
progress：设置当前进度值，例如"50"
style：设置样式，没有android:前缀。
值有?android:attr/progressBarStyleHorizontal（水平进度条）、...Small（小的圆形进度条）、...Large（大的圆形进度条）
@android:style/Widget.ProgressBar.Horizontal、...Small、...Large，第一个比上面粗，后面2个是规律旋转，上面的是不规律旋转

SeekBar：拖动条组件，是进度条的子类
thumb：设置拖动条原点的图案，可以是图片
交互：SeekBar seekBar=findViewById(id号);
seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
	@Override
	public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {//参数2表示当前进度
		//进度条改变
	}

	@Override
	public void onStartTrackingTouch(SeekBar seekBar) {
		//开始触摸进度条
	}

	@Override
	public void onStopTrackingTouch(SeekBar seekBar) {
		//结束触摸进度条
	}
});




---------------------------------------------------------------------------------------------------------------------------------------------------

注意事项：
1、如果开起来手机设备找不到就在任务管理器中关闭adb.exe，再重启编译器
2、design editor is unavailable until next gradle sync，如果界面出现这个错误点击sync project with Gradle Files按钮即可
3、按键背景颜色无法生效时修改res/values/themes.xml和res/values-night/themes.xml文件中<style name="Theme.HelloWorld" parent="Theme.MaterialComponents.DayNight.DarkActionBar.Bridge">
4、APP设置全屏显示的时候使用getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
//但是标题栏没有去除掉，原因是继承了AppCompatActivity，在主配置文件中修改成android:theme="@style/Theme.AppCompat.NoActionBar"即可，参考https://blog.csdn.net/android157/article/details/80774143





